"""
JSON pipeline example

Demonstrates loading and running pipelines from JSON (cross-language compatibility)
"""

import json
from agent_dsl import run_pipeline_json, ExecutionOptions


# Sample pipeline in JSON format (as would be generated by TypeScript parser)
SAMPLE_PIPELINE_JSON = """
{
  "name": "json_example",
  "inputs": [
    {
      "name": "message",
      "type": "string"
    }
  ],
  "steps": [
    {
      "name": "process",
      "expression": {
        "id": "tool_1",
        "type": "tool",
        "tool_name": "callApi",
        "config": {
          "url": "/echo",
          "method": "POST"
        },
        "input_type": "string",
        "output_type": "object"
      },
      "dependencies": []
    },
    {
      "name": "extract",
      "expression": {
        "id": "op_1", 
        "type": "operation",
        "operator": "map",
        "inputs": [
          {
            "id": "var_1",
            "type": "variable",
            "name": "process",
            "value_type": "object"
          },
          {
            "id": "lit_1",
            "type": "literal",
            "value_type": "string", 
            "value": "response.data"
          }
        ],
        "output_type": "string"
      },
      "dependencies": ["process"]
    }
  ],
  "outputs": [
    {
      "name": "result",
      "step_name": "extract",
      "type": "string"
    }
  ]
}
"""


def run_json_example():
    """Run pipeline from JSON"""
    print("üöÄ Running JSON pipeline example...\n")
    
    try:
        print("üìù Pipeline JSON:")
        # Pretty print the JSON
        pipeline_data = json.loads(SAMPLE_PIPELINE_JSON)
        print(json.dumps(pipeline_data, indent=2))
        print()
        
        # Run pipeline
        inputs = {"message": "Hello from JSON pipeline!"}
        options = ExecutionOptions(debug=True)
        
        print("‚ö° Executing JSON pipeline...")
        print(f"   Inputs: {inputs}")
        
        def on_next(result):
            print("\n‚úÖ JSON pipeline completed")
            print(f"   Result: {result}")
        
        def on_error(error):
            print(f"\n‚ùå JSON pipeline failed: {error}")
        
        def on_completed():
            print("\nüéâ JSON pipeline example completed!")
        
        # Run pipeline from JSON
        observable = run_pipeline_json(SAMPLE_PIPELINE_JSON, inputs, options)
        observable.subscribe(on_next, on_error, on_completed)
        
    except Exception as e:
        print(f"‚ùå Error: {e}")


if __name__ == "__main__":
    run_json_example()